dnorm(x, mean, sd)- Essa função é útil para a criação de gráficos com distribuição normal dados os parâmetros

	x <- seq(-4, 4, length=100)
	y <- dnorm(x) # por padrão o R usa mean = 0 e sd = 1
	plot(x,y, type = "l", lwd = 1, axes = FALSE, xlab = "", ylab = "")
	axis(1, at = -3:3, labels = c("-3s", "-2s", "-1s", "mean", "1s", "2s", "3s"))

dbinom- Para calcular a função de probabilidade binomial para um conjunto de valores x, um número de tentativas n e uma
	probabilidade de sucesso p você pode usar a função dbinom, que possui a seguinte sintaxe

	dbinom(x, # valor eixo x (x = 0, 1, 2, ..., k)
 	size, # número de tentativas (n >= 0)
 	prob) # a probabilidade de sucesso em cada tentativa

pnorm- Simplificando, pnorm retorna a área à esquerda de um determinado valor x na distribuição normal. Se você estiver
	interessado na área à direita de um determinado valor q, você pode simplesmente adicionar o argumento
	lower.tail = FALSE

		Exemplo 1: Suponha que a altura das plantas em uma determinada região seja normalmente distribuída com média
	de μ= 13 polegadas e desvio padrão de σ= 2 polegadas. Aproximadamente que porcentagem de plantas nesta região
	tem entre 10 e 14 polegadas de altura?
	> pnorm(14, mean = 13, sd = 2) - pnorm(10, mean = 13, sd = 2)
	[1] 0.6246553

    dados <- c(7.1,2.0,8.2,7.4,4.5,6.1,9.4,10.0,8.4,6.1,10.0,10.0,3.7,6.4,
               7.4,8.4,6.8,8.4,8.3,7.8,2.9,4.5,8.4,4.8,6.5,8.4,8.4,8.7,7.8,
               6.8,7.8,5.8,8.4,6.4,6.8,0.0,10.0,6.0,7.4,8.4,6.8,7.8,8.4,8.9,
               5.5,7.0,5.8,10.0,10.0,3.1,4.6,5.6,4.9,6.2,5.2,1.9,6.8,6.3,6.4,
               3.5,7.4,10.0,7.4,6.8)
    # Calcule a média e o desvio padrão das pontuações
    media_dados <- mean(dados)
    desvio_padrao_dados <- sd(dados)
    # Defina a pontuação de corte
    pontuacao_corte <- 6
    # Calcule a probabilidade usando pnorm
    probabilidade <- 1 - pnorm(pontuacao_corte, mean = media_dados, sd = desvio_padrao_dados)
    # Crie uma sequência de valores para a curva da distribuição normal
    x <- seq(0, 11, length = 100)
    # Calcule a densidade de probabilidade para a sequência de valores
    densidade_probabilidade <- dnorm(x, mean = media_dados, sd = desvio_padrao_dados)
    # Crie um gráfico comparando a curva da distribuição normal com os dados reais
    hist(dados, breaks = 10, prob = TRUE, main = "Distribuição de Pontuações de Teste", xlab = "Pontuação")
    lines(x, densidade_probabilidade, col = "red", lwd = 2)
    abline(v = pontuacao_corte, col = "blue", lwd = 2)
    legend("topright", legend = paste("P(>=", pontuacao_corte,") =", round(probabilidade, 4)), col =
             "blue")

pbinom - Simplificando, pbinom retorna a área à esquerda de um determinado valor q na distribuição binomial. Se você estiver
	interessado na área à direita de um determinado valor q, você pode simplesmente adicionar o argumento
	lower.tail = FALSE
		Exemplo: Suponha que Caio acerte 30% de chute a gol. Se ele bater 10 pênaltis, qual é a probabilidade de marcar 4
		gols ou menos?
		> pbinom(4, size=10, prob=.3)
		[1] 0.8497317
qnorm - Simplificando, você pode usar qnorm para descobrir qual é o escore Z do p-ésimo quantil da distribuição normal.
	> qnorm(.9999, mean = 0, sd = 1)
	[1] 3.719016
	> qnorm(.999, mean = 0, sd = 1)
	[1] 3.090232
	> qnorm(.99, mean = 0, sd = 1)
	[1] 2.326348
	Acima temos os escores Z padronizados de uma curva normal no 99%, 99,9% e 99,99%!!!
	A função rnorm gera um vetor de variáveis aleatórias normalmente distribuídas dado um comprimento de vetor n,
	uma média populacional μ e um desvio padrão populacional σ.

qbinom- A função qbinom retorna o valor da função de densidade cumulativa inversa da distribuição binomial dada uma
	determinada variável aleatória q, número de tentativas (tamanho) e probabilidade de sucesso em cada tentativa
	(prob). A sintaxe para usar qbinom é a seguinte:

	qbinom(q, size, prob)
	Simplificando, você pode usar qbinom para descobrir o p-ésimo quantil da distribuição binomial.
	> qbinom(0.25, size=10, prob=.4)
	[1] 3

rnorm- rnorm(n, mean, sd)
	> narrowDistribution <- rnorm(1000, mean = 50, sd = 15)
	> wideDistribution <- rnorm(1000, mean = 50, sd = 35)
	> par(mfrow=c(1, 2)) #one row, two columns
	> hist(narrowDistribution, breaks=50, xlim=c(-50, 150))
	> hist(wideDistribution, breaks=50, xlim=c(-50, 150))
	Neste código acima, podemos ver a diferença que faz um alto desvio padrão comparado com um baixo desvio padrão
	dentro de uma amostra.

rbinom- A função rbinom gera um vetor de variáveis aleatórias distribuídas binominalmente dado um comprimento de vetor
	n, número de tentativas (tamanho) e probabilidade de sucesso em cada tentativa (prob). A sintaxe para usar rbinom
	o é a seguinte: 
		rbinom(n, size, prob)
	Exemplo:
	Gerar um vetor que mostre o número de sucessos de 10 experimentos binomiais com 100 tentativas onde a
	probabilidade de sucesso em cada tentativa é 0,3
	> result <- rbinom(10, size=100, prob=0.3)
	> result
	[1] 25 28 30 32 36 37 35 28 39 22





